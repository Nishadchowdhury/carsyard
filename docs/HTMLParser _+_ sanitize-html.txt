
------------------------------------html-react-parser: is a JavaScript library that converts HTML strings into React elements.

import parse from "html-react-parser";

const htmlString = "<h1>Hello, <span style='color: red'>World!</span></h1>";

export default function App() {
return <div>{parse(htmlString)}</div>;
}
üîπ This will render:
<h1>Hello, <span style="color: red">World!</span></h1>

Why Use html-react-parser?
‚úÖ Convert raw HTML from APIs or databases into React components.
‚úÖ Safer than dangerouslySetInnerHTML (prevents XSS when used properly).
‚úÖ Modify HTML before rendering (using transform functions).

Advanced Usage
1Ô∏è‚É£ Transforming Elements
You can modify elements before rendering:
import parse, { domToReact } from "html-react-parser";

const htmlString = "<div><p>Hello</p><a href='https://example.com'>Click</a></div>";

const transform = (node: any) => {
  if (node.name === "a") {
    return <a href={node.attribs.href} target="_blank" rel="noopener noreferrer">{domToReact(node.children)}</a>;
  }
};

export default function App() {
  return <div>{parse(htmlString, { replace: transform })}</div>;
}
‚úîÔ∏è This ensures all <a> links open in a new tab safely.

2Ô∏è‚É£ Ignoring Scripts for Security
By default, <script> tags won't be parsed, reducing XSS risks:

const html = "<script>alert('Hacked!')</script><p>Safe Content</p>";

export default function App() {
  return <div>{parse(html)}</div>; // <p>Safe Content</p> (script ignored)
}






------------------------------------sanitize-html: sanitize-html is a JavaScript library that removes unwanted or potentially dangerous HTML elements and attributes to prevent XSS attacks and ensure safe rendering of HTML content.

Basic Usage

import sanitizeHtml from "sanitize-html";

const dirtyHtml = `<script>alert("Hacked!")</script><h1>Hello <span style="color:red">World</span></h1>`;

const cleanHtml = sanitizeHtml(dirtyHtml);

console.log(cleanHtml);  
// Output: "<h1>Hello <span style="color:red">World</span></h1>" (Script removed)

‚úîÔ∏è The <script> tag is removed to prevent malicious code execution.

Why Use sanitize-html?
‚úÖ Prevents XSS attacks by removing <script> and dangerous attributes.
‚úÖ Allows safe HTML rendering from user-generated content (e.g., from a CMS or API).
‚úÖ Customizable ‚Äî control which tags, attributes, and styles are allowed.

Customizing Allowed Elements & Attributes

const cleanHtml = sanitizeHtml(dirtyHtml, {
  allowedTags: ["b", "i", "em", "strong", "p", "span"],
  allowedAttributes: { span: ["style"] },
});

console.log(cleanHtml);  
// Output: "<p>Hello <span style="color:red">World</span></p>" (Only allowed tags remain)

‚úîÔ∏è Only <b>, <i>, <em>, <strong>, <p>, and <span> are allowed.
‚úîÔ∏è Only style is allowed on <span>, all other attributes are removed.

Removing All Tags (Plain Text Output)

const plainText = sanitizeHtml(dirtyHtml, { allowedTags: [] });

console.log(plainText);  
// Output: "Hello World" (All HTML removed)

‚úîÔ∏è Converts HTML into plain text by stripping all tags.

Allowing Only Specific Styles
const cleanHtml = sanitizeHtml(dirtyHtml, {
  allowedTags: ["span"],
  allowedAttributes: { span: ["style"] },
  allowedStyles: {
    "*": { color: [/^red$/] }, // Only allow red color
  },
});

console.log(cleanHtml);
// Output: "<span style="color:red">World</span>"


‚úîÔ∏è Restricts inline styles to only allow "red" as a color.

When to Use sanitize-html?
Rendering user-generated content (e.g., comments, reviews, blog posts).
Sanitizing API responses that return HTML.
Preventing XSS attacks when handling HTML input from users.
üöÄ Use sanitize-html to ensure safe, clean HTML rendering in web applications!
