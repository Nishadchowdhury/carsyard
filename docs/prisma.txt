### 🔥 Prisma Basics – A Beginner's Guide

Prisma is an ORM (Object-Relational Mapper) for Node.js that makes it easy to work with databases.

npx prisma init
This creates a prisma/schema.prisma file where you define your database models.

Define Models in Prisma Schema
Inside prisma/schema.prisma, define your database tables.
model User {
id Int @id @default(autoincrement()) //id → Auto-incrementing primary key.
name String //name → A required string field.
email String @unique //email → A unique field.
}

Migrate Database
After defining models, create the database tables:
npx prisma migrate dev --name init

Generate Prisma Client
To interact with the database using Prisma, generate the client:
npx prisma generate

Use Prisma in Code
Now, create and query data using Prisma in a TypeScript/JavaScript file.

import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();

CRUD Operations
✅ Create a User

const user = await prisma.user.create({
  data: {
    name: "John Doe",
    email: "john@example.com"
  }
});
console.log(user);

Close the Prisma Client
When done, disconnect Prisma to avoid memory leaks:

🎯 Summary
✅ Prisma simplifies database operations
✅ Define models in schema.prisma
✅ Run migrations to create tables
✅ Use Prisma Client for CRUD operations

Do you want to go deeper with relationships and advanced queries? 🚀

🔥 Prisma Level 2 – Relationships, Transactions & Advanced Queries
Now that you understand the basics of Prisma, let's explore relationships, transactions, and advanced queries. 🚀

Relationships in Prisma
In real-world applications, databases contain relationships between tables. Prisma supports:

One-to-One (1:1)
One-to-Many (1:M)
Many-to-Many (M:M)

📌 One-to-Many Relationship (User → Posts)
model User {
  id    Int     @id @default(autoincrement())
  name  String
  email String  @unique
  posts Post[]
}

model Post {
  id      Int    @id @default(autoincrement())
  title   String
  content String
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
}

🔹 One User can have many Posts
🔹 A Post belongs to one User

npx prisma migrate dev --name add_posts

insert data 
const user = await prisma.user.create({
  data: {
    name: "Alice",
    email: "alice@example.com",
    posts: {
      create: [
        { title: "My First Post", content: "Hello World!" },
        { title: "My Second Post", content: "Learning Prisma" }
      ]
    }
  },
  include: { posts: true }
});
console.log(user);




📌 Many-to-Many Relationship (Users ↔ Courses)
model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  courses  Course[] @relation("UserCourses")
}

model Course {
  id       Int       @id @default(autoincrement())
  title    String
  users    User[]   @relation("UserCourses")
}

const course = await prisma.course.create({
  data: {
    title: "React Basics",
    users: {
      connect: [{ id: 1 }, { id: 2 }]
    }
  }
});
console.log(course);


🔹 A User can enroll in multiple Courses
🔹 A Course can have multiple Users

2️⃣ Transactions in Prisma
A transaction ensures that multiple database operations execute together (all succeed or fail).

Example: Creating a user and a post in one transaction

const [user, post] = await prisma.$transaction([
  prisma.user.create({
    data: { name: "John Doe", email: "john@example.com" }
  }),
  prisma.post.create({
    data: { title: "New Post", content: "This is Prisma!", userId: 1 }
  })
]);
console.log(user, post);
👉 Why use transactions?

If the second operation (post.create) fails, the first (user.create) is also rolled back.
Ensures data integrity.



📌 Sorting & Pagination
const users = await prisma.user.findMany({
  orderBy: { name: "asc" } 
});
console.log(users);

📌 Fetch 5 users per page
const users = await prisma.user.findMany({
  take: 5,
  skip: 10 // Skip the first 10 users
});
console.log(users);


📌 Aggregation & Grouping
Find the total number of users
const count = await prisma.user.count();
console.log(`Total users: ${count}`);

const count = await prisma.user.count();
console.log(`Total users: ${count}`);
const avgPosts = await prisma.post.aggregate({
  _avg: { id: true }
});
console.log(avgPosts);


Prisma Level 3 – Advanced Usage 🚀
Now that you understand basic Prisma queries (include, select, create), let's dive deeper into advanced topics:

1️⃣ Upserting Data (Insert or Update Automatically)
upsert is useful when you don’t know if a record already exists—it updates if found, otherwise, it creates a new one.

✅ Example: Upsert a User
const user = await prisma.user.upsert({
  where: { email: "alice@example.com" },
  update: { name: "Updated Alice" },
  create: {
    name: "Alice",
    email: "alice@example.com"
  }
});
console.log(user);
🔹 If alice@example.com exists, the name is updated.
🔹 If not found, a new user is created.

2️⃣ Filtering with Complex Queries
You can use advanced filtering with where to query specific data.
✅ Example: Find All Users Created in the Last 7 Days
const users = await prisma.user.findMany({
  where: {
    createdAt: {
      gte: new Date(new Date().setDate(new Date().getDate() - 7)) // 7 days ago
    }
  }
});
🔹 gte (greater than or equal) filters users created in the last 7 days.

✅ Example: Find Users Whose Name Contains "Ali" (Case-Insensitive)
const users = await prisma.user.findMany({
  where: {
    name: {
      contains: "Ali",
      mode: "insensitive"
    }
  }
});
🔹 contains = Find names that include "Ali"
🔹 mode: "insensitive" = Case insensitive search



3️⃣ Relations – Query Nested Data
When querying a user, you can also fetch related posts.

✅ Example: Get Users with Their Posts
const users = await prisma.user.findMany({
  include: {
    posts: true
  }
});
console.log(users);
🔹 This will return all users along with their posts.

5️⃣ Soft Deletes (Mark as Deleted Instead of Deleting)
Instead of physically deleting a record, add a deletedAt field.
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  deletedAt DateTime? @default(null) // Soft delete field
}

✅ Query: Soft Delete a User
await prisma.user.update({
  where: { id: 1 },
  data: { deletedAt: new Date() }
});

✅ Query: Get Only Active/nonDeleted Users
const users = await prisma.user.findMany({
  where: { deletedAt: null }
});
🔹 Instead of deleting, we mark it as deleted.
🔹 We only fetch active users by checking deletedAt.

🔥 Summary
Feature:--------	Code Example
Transactions:	$transaction([op1, op2])
Upsert:	upsert({ where, update, create })
Filtering:	where: { contains, gte, lte }
Relations:	include: { posts: true }
Pagination:	take: 10, skip: 10
Soft Deletes:	update({ deletedAt: new Date() })


🚀 Level 4 – Expert Usage & Performance Optimization 🚀
Now that you've mastered transactions, upserts, filtering, relations, and pagination, let's go deeper into raw SQL, middleware, indexing, and performance optimizations.

1️⃣ Running Raw SQL Queries in Prisma

Prisma provides prisma.$queryRaw and prisma.$executeRaw for direct SQL queries.

const users = await prisma.$queryRaw`SELECT * FROM "User" WHERE "email" = ${"alice@example.com"}`;
console.log(users);

🔹 $executeRaw = Executes SQL without returning data.



2️⃣ Middleware – Modify Queries Before Execution
Prisma middleware lets you intercept queries to log, validate, or modify them before execution.

✅ Example: Logging All Queries (prisma.middleware.ts)
// we can use this in prisma client maker file 
prisma.$use(async (params, next) => {
  const before = Date.now();
  const result = await next(params);
  const after = Date.now();

  // to enable soft delete only 
  if (params.action === 'delete') {
        params.action = 'update';
        params.args.data = { deletedAt: new Date() }; // Set soft delete timestamp
    }

  🛠 Modify Queries to Exclude Soft-Deleted Records
  prisma.$use(async (params, next) => {
    if (params.model === 'User' && params.action === 'findMany') {
        params.args.where = { ...params.args.where, deletedAt: null }; // Only return non-deleted users
    }
    return next(params);
    });



  console.log(`Query ${params.model}.${params.action} took ${after - before}ms`);
  return result;
});


3️⃣ Indexing for Performance Optimization
By default, Prisma doesn't create indexes, but you can manually define them in your schema.

✅ Example: Add an Index for Faster Queries (schema.prisma)
model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String
  @@index([name]) // Index on 'name' column
}
🔹 Indexing speeds up queries when filtering by name.
🔹 Use @unique on email for faster lookups.


4️⃣ Optimized Bulk Inserts with Transactions
Instead of inserting records one by one, batch inserts improve performance.

✅ Example: Bulk Insert Users Using Transactions
const users = [
  { name: "Alice", email: "alice@example.com" },
  { name: "Bob", email: "bob@example.com" },
];

await prisma.$transaction(
  users.map(user => prisma.user.create({ data: user }))
);
🔹 Executes multiple inserts in one transaction, reducing database overhead.



5️⃣ Optimizing Large Queries with select
Fetching all fields from a table can slow down performance.

✅ Example: Select Only Needed Fields
const users = await prisma.user.findMany({
  select: {
    id: true,
    name: true, // Fetch only 'id' and 'name'
  }
});

✅ Optimized Query (Loads Only Required Fields)
const users = await prisma.user.findMany({
    select: { id: true, name: true } // Fetch only `id` & `name`
});

✅ Fetching Related Data Efficiently
const users = await prisma.user.findMany({
    include: { posts: { select: { title: true } } } // Load only post titles
});

🔹 Avoid select: {} when working with large datasets.



6️⃣ Using Connection Pooling with Prisma
By default, Prisma opens many connections to the database, which can cause performance issues.

✅ Use a Connection Pool (PostgreSQL)
Modify DATABASE_URL in .env:
DATABASE_URL="postgresql://user:password@localhost:5432/dbname?connection_limit=5"
🔹 Limits active connections to prevent database overload.

7️⃣ Caching to Reduce Load on the Database
To avoid hitting the database repeatedly, cache frequently accessed queries.

✅ Example: Cache User Data with Redis
import { createClient } from "redis";
const redis = createClient();

async function getUser(id: number) {
  const cachedUser = await redis.get(`user:${id}`);
  if (cachedUser) return JSON.parse(cachedUser);

  const user = await prisma.user.findUnique({ where: { id } });
  await redis.set(`user:${id}`, JSON.stringify(user), "EX", 3600); // Cache for 1 hour
  return user;
}
🔹 Reduces database queries and improves performance.

🔥 Summary – What You Learned in Level 4
Feature:--------------	Code Example
Raw SQL Queries:	$queryRaw and $executeRaw
Middleware:	prisma.$use(async (params, next) => { ... })
Indexing:	@@index([column]) in schema.prisma
Bulk Inserts:	prisma.$transaction([...])
Optimized Queries:	select: { id: true, name: true }
Connection Pooling:	?connection_limit=5 in DATABASE_URL
Caching with Redis:	redis.set(key, value, "EX", 3600)


🐦‍🔥 Level 5: Advanced Prisma Middleware & Performance Optimization
Now that you're comfortable with middleware, let's optimize queries, implement caching, and use connection pooling for better performance.

🔹 Bulk Inserts with createMany (Faster Seeding)
Instead of inserting one record at a time, we can insert multiple records in a single query.

✨ Example: Seeding 1000 Users Efficiently

await prisma.user.createMany({
    data: Array.from({ length: 1000 }, () => ({
        name: faker.name.fullName(),
        email: faker.internet.email(),
    })),
    skipDuplicates: true, // Avoids errors for duplicate entries
});


🔹 Optimistic Locking for Concurrency Control
To prevent overwriting conflicts, use an incrementing version field.
✨ Add a version Field to Schema
model User {
    id      String  @id @default(uuid())
    name    String
    email   String  @unique
    version Int     @default(1)
}
✨ Implement Optimistic Locking
async function updateUser(userId: string, newName: string) {
    const user = await prisma.user.findUnique({ where: { id: userId } });

    await prisma.user.update({
        where: { id: userId, version: user.version },
        data: { name: newName, version: { increment: 1 } } // Ensures no stale updates
    });
}


🔹Real-Time Updates with Prisma & WebSockets
 If you want real-time UI updates, you can use Prisma with WebSockets (Socket.io).
✨ Backend: Send Events on DB Change
import { Server } from "socket.io";

const io = new Server(3001);

prisma.$use(async (params, next) => {
    const result = await next(params);
    if (params.model === "Message" && params.action === "create") {
        io.emit("newMessage", result); // Send real-time message
    }
    return result;
});
✨ Frontend: Listen for Real-Time Data
const socket = io("http://localhost:3001");

socket.on("newMessage", (message) => {
    console.log("New message received:", message);
});



------------------------------------- prisma with TS in client side ------------------------------------

🔹 1. Basic Prisma Types
📌 PrismaClient (Main Database Client)
This is the main instance to interact with the database.

🔹 2. CRUD Operations & Their Types
Prisma provides auto-generated types for database models and query operations.

📌 Create Operation (Prisma.ModelCreateInput)
Each model in your schema gets a CreateInput type.

import { Prisma } from "@prisma/client";

async function createUser() {
    const userData: Prisma.UserCreateInput = {
        name: "Alice",
        email: "alice@example.com",
    };

    const newUser = await prisma.user.create({
        data: userData,
    });

    return newUser;
}
✅ Use Case: Prisma.ModelCreateInput ensures type safety while inserting data.



📌 Read Operation (Prisma.ModelWhereUniqueInput & Prisma.ModelFindManyArgs)
Fetching records requires specific types like:

WhereUniqueInput → Fetch by unique fields
FindManyArgs → Fetch multiple records with filters

async function getUserById(id: string) {
    const user = await prisma.user.findUnique({
        where: { id }, // Prisma.UserWhereUniqueInput
    });

    return user;
}

async function getAllUsers() {
    const users = await prisma.user.findMany(); // Prisma.UserFindManyArgs
    return users;
}

✅ Use Case: Helps in searching users by unique identifier or filtering data.


📌 Update Operation (Prisma.ModelUpdateInput)
async function updateUserEmail(id: string, newEmail: string) {
    const updatedUser = await prisma.user.update({
        where: { id },
        data: { email: newEmail }, // Prisma.UserUpdateInput
    });

    return updatedUser;
}
✅ Use Case: Prisma.ModelUpdateInput ensures only valid fields are updated.


📌 Delete Operation (Prisma.ModelWhereUniqueInput)
async function deleteUser(id: string) {
    await prisma.user.delete({
        where: { id }, // Prisma.UserWhereUniqueInput
    });
}
✅ Use Case: Ensures only valid users can be deleted.


🔹 3. Prisma Query Return Types
📌 Prisma.Promise<Model> (Return Type of Prisma Queries)
When calling prisma.user.findMany(), it returns a promise that resolves to an array of users.
async function fetchUsers(): Promise<User[]> {
    return await prisma.user.findMany();
}
✅ Use Case: Ensures function returns a typed array of users.

🔹 4. Aggregate & Count Queries
📌 Prisma.ModelCountArgs (Count Records)
async function getUserCount(): Promise<number> {
    return await prisma.user.count();
}


📌 Prisma.ModelAggregateArgs (Aggregations)
async function getUserStats() {
    return await prisma.user.aggregate({
        _count: true,
        _avg: { age: true },
        _sum: { age: true },
        _min: { age: true },
        _max: { age: true },
    });
}
✅ Use Case: Get statistics without fetching all records.


🔹 5. Prisma Transaction Types
📌 Prisma.PrismaPromise<T> (Transaction Return Type)
async function transactionExample() {
    await prisma.$transaction([
        prisma.user.create({ data: { name: "John" } }),
        prisma.post.create({ data: { title: "New Post" } }),
    ]);
}
✅ Use Case: Ensures atomicity (all queries succeed or rollback).

🔹 6. Upsert Query Type (Prisma.ModelUpsertArgs)
Upsert = Update if exists, else Create.
async function upsertUser(id: string, name: string) {
    return await prisma.user.upsert({
        where: { id },
        update: { name }, // Prisma.UserUpdateInput
        create: { id, name }, // Prisma.UserCreateInput
    });
}
✅ Use Case: Ensures no duplicate entries while updating.

🔹 7. Pagination Types (Prisma.ModelFindManyArgs)
Prisma supports pagination using skip and take.

async function getPaginatedUsers(page: number, pageSize: number) {
    return await prisma.user.findMany({
        skip: (page - 1) * pageSize,
        take: pageSize,
    });
}
✅ Use Case: Efficient pagination for large datasets.


🔥 Summary of Prisma Types
Type:------------------------	Description
PrismaClient:	The main database client
Prisma.ModelCreateInput:	Type for creating a new record
Prisma.ModelUpdateInput:	Type for updating a record
Prisma.ModelWhereUniqueInput:	Type for fetching/updating/deleting a unique record
Prisma.ModelFindManyArgs:	Type for fetching multiple records
Prisma.ModelCountArgs	Type: for counting records
Prisma.ModelAggregateArgs:	Type for aggregation queries
Prisma.PrismaPromise<T>:	Return type for async Prisma queries
Prisma.ModelUpsertArgs:	Type for upsert queries


🔥 Prisma Types - Level 2 🔥

Prisma.UserUncheckedCreateInput - (Creating Records Without Checks)
📌 What is it?
Allows creating records without relation checks (faster, but riskier).
✅ Example Use Case

const newUserFast: Prisma.UserUncheckedCreateInput = {
    id: "uuid-generated",
    name: "Fast User",
    email: "fast@example.com",
    profileId: "existing-profile-id"  // Directly assigning foreign key
};

const user = await prisma.user.create({
    data: newUserFast
});

✔ Why use it?

Bypasses relational constraints (useful for performance optimizations).
Used in bulk insertions where relations are manually handled.


1️⃣ Prisma.UserUncheckedUpdateInput - (Updating Records Without Checks)
📌 What is it?
Similar to UserUpdateInput, but allows updating without relation validation.
✅ Example Use Case

const updatedUserFast: Prisma.UserUncheckedUpdateInput = {
    profileId: "new-profile-id"  // Directly updating foreign key
};

await prisma.user.update({
    where: { id: "123" },
    data: updatedUserFast
});
✔ Why use it?

Faster updates in some cases.
Can be useful when relations are already validated elsewhere.


2️⃣ Prisma.UserWhereInput - (Filtering Data)
📌 What is it?
Defines filters for queries (e.g., findMany, deleteMany).
✅ Example Use Case

const filter: Prisma.UserWhereInput = {
    email: { contains: "example.com" },
    AND: [
        { createdAt: { gte: new Date("2024-01-01") } }
    ]
};

const users = await prisma.user.findMany({ where: filter });

✔ Why use it?

Allows complex filtering using conditions like AND, OR, NOT.



3️⃣  Prisma.UserOrderByInput - (Sorting Query Results)
📌 What is it?
Defines sorting rules for queries.
✅ Example Use Case
const orderBy: Prisma.UserOrderByWithRelationInput = {
    createdAt: "desc"
};

const users = await prisma.user.findMany({ orderBy });
✔ Why use it?

Helps in ordering records efficiently.
Can be used with pagination.

4️⃣ Prisma.UserInclude - (Fetching Relations)
📌 What is it?
Used to include related models when querying.
✅ Example Use Case

const userWithProfile: Prisma.UserInclude = {
    profile: true
};

const user = await prisma.user.findUnique({
    where: { id: "123" },
    include: userWithProfile
});

✔ Why use it?

Helps in retrieving related data in a single query.

5️⃣ Prisma.UserSelect - (Selecting Specific Fields)
📌 What is it?
Defines which fields should be returned from a query.
✅ Example Use Case

const selectedFields: Prisma.UserSelect = {
    name: true,
    email: true
};

const user = await prisma.user.findUnique({
    where: { id: "123" },
    select: selectedFields
});

✔ Why use it?

Optimizes queries by reducing data retrieval.

6️⃣ Prisma.UserDelegate - (Model-Level Operations)
📌 What is it?
Represents all available operations for a model.
✅ Example Use Case

const userDelegate: Prisma.UserDelegate = prisma.user;

✔ Why use it?
this object contains all the possible operations with user model.
Can be used in dynamic function calls.


📌 Level 3 - Advanced Prisma Types


1️⃣ Prisma.TransactionClient - (Handling Transactions)
📌 What is it?
Used when running database transactions.
Ensures that multiple operations either succeed together or fail together.
✅ Example Use Case


await prisma.$transaction(async (tx: Prisma.TransactionClient) => {
    const user = await tx.user.create({
        data: { name: "John", email: "john@example.com" }
    });

    await tx.profile.create({
        data: { bio: "Software Developer", userId: user.id }
    });

    // If any operation fails, everything is rolled back.
});


✔ Why use it?
 Ensures data integrity in multi-step database operations.

2️⃣ Prisma.BatchPayload - (Bulk Operations)
📌 What is it?
Used when deleting or updating multiple records at once.
✅ Example Use Case


const deleteResult: Prisma.BatchPayload = await prisma.user.deleteMany({
    where: { email: { contains: "spam.com" } }
});

console.log(`Deleted ${deleteResult.count} users.`);

✔ Why use it?

Provides the count of affected rows in bulk operations.

3️⃣ Prisma.AggregateUser - (Aggregating Data)
📌 What is it?
Used for counting, averaging, summing, min, and max operations.
✅ Example Use Case

const stats: Prisma.AggregateUser = await prisma.user.aggregate({
    _count: { _all: true },
    _avg: { age: true },
    _max: { age: true }
});

console.log(`Total users: ${stats._count._all}`);
console.log(`Average age: ${stats._avg.age}`);
console.log(`Oldest user: ${stats._max.age}`);

✔ Why use it?

Useful for statistics dashboards and reporting.

4️⃣ Prisma.Middleware - (Intercepting Queries)
📌 What is it?
Allows you to intercept and modify Prisma queries before execution.
✅ Example Use Case

prisma.$use(async (params, next) => {
    if (params.model === "User" && params.action === "create") {
        params.args.data.createdAt = new Date(); // Auto-assign createdAt timestamp
    }

    return next(params);
});

✔ Why use it?

Useful for logging, validation, or modifying queries dynamically.

5️⃣ Prisma.Sql - (Executing Raw SQL Queries)
📌 What is it?
Used when running raw SQL queries inside Prisma.
✅ Example Use Case

const users = await prisma.$queryRaw<Prisma.User[]>`
    SELECT * FROM "User" WHERE email LIKE '%@example.com%'
`;

console.log(users);


✔ Why use it?

Allows running custom SQL queries when Prisma's ORM is not flexible enough.

6️⃣ Prisma.Decimal - (Handling Precision Numbers)
📌 What is it?
Used to handle high-precision decimal numbers, often for financial calculations.
✅ Example Use Case

const product = await prisma.product.create({
    data: { name: "Laptop", price: new Prisma.Decimal("999.99") }
});

✔ Why use it?

Prevents floating-point precision errors in pricing and finance calculations.

7️⃣ Prisma.JsonValue - (Storing JSON Data)
📌 What is it?
Used for JSON fields in the database.
✅ Example Use Case

const settings: Prisma.JsonValue = {
    theme: "dark",
    notifications: { email: true, sms: false }
};

await prisma.user.update({
    where: { id: "123" },
    data: { settings }
});


✔ Why use it?

Allows storing flexible, nested data inside a single field.


8️⃣ Prisma.SelectSubset<T, U> - (Type-Safe Query Selection)
📌 What is it?
Ensures that the selected fields match what the query actually returns.
✅ Example Use Case

async function getUser<T extends Prisma.UserSelect>(
    select: Prisma.SelectSubset<T, Prisma.UserSelect>
) {
    return prisma.user.findFirst({ select });
}

const user = await getUser({ name: true, email: true });
console.log(user);

✔ Why use it?

Ensures type-safe queries, avoiding runtime errors.


9️⃣ Prisma.PromiseReturnType<T> - (Extracting Return Types from Prisma Queries)
📌 What is it?
Extracts the return type from a Prisma function.
✅ Example Use Case

type UserType = Prisma.PromiseReturnType<typeof prisma.user.findUnique>;

const user: UserType = await prisma.user.findUnique({ where: { id: "123" } });

✔ Why use it?

Helps when defining strict TypeScript types.


🔟 Prisma.ModelName - (Referencing Model Names)
📌 What is it?
Represents the string name of a Prisma model.
✅ Example Use Case

function logQuery(model: Prisma.ModelName, action: string) {
    console.log(`Executing ${action} on model: ${model}`);
}

logQuery("User", "create");

✔ Why use it?

Helps in dynamic logging and query tracking.

🔥 Level 3 Summary

Type:---------------	Description
Prisma.TransactionClient:	Runs queries inside transactions
Prisma.BatchPayload:	Handles bulk updates and deletions
Prisma.AggregateUser:	Performs count, sum, min, max, and avg
Prisma.Middleware:	Intercepts and modifies queries before execution
Prisma.Sql:	Runs raw SQL queries inside Prisma
Prisma.Decimal:	Handles precision numbers (useful for money calculations)
Prisma.JsonValue	Stores and retrieves JSON objects
Prisma.SelectSubset<T, U>:	Ensures type-safe query selections
Prisma.PromiseReturnType<T>:	Extracts return types from Prisma queries
Prisma.ModelName:	Represents the name of a Prisma model




📌 Level 4 - Expert Prisma Types
This level will cover event-driven programming, advanced filtering, computed fields, recursive relations, and more.

1️⃣ Prisma.EventListener - (Listening to Database Events)
📌 What is it?
Allows you to listen for changes happening inside the database.
Used for logging, analytics, caching, and triggers.
✅ Example Use Case


prisma.$on("query", (e) => {
    console.log("Query executed:", e.query);
    console.log("Params:", e.params);
});


✔ Why use it?

Helps in debugging slow queries and monitoring database activity.


2️⃣ Prisma.Args<T> - (Extracting Arguments from Prisma Queries)
📌 What is it?
Extracts the arguments that can be passed into a specific query.
✅ Example Use Case


type UserArgs = Prisma.Args<typeof prisma.user.findMany>;
✔ Why use it?

Helps in defining strictly typed query parameters.





